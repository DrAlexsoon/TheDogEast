class Solution {

    //DP
    // f(i,j) = f(i+1,j-1) && i == j;
    // i = 0; j = length
    // i < j
    public String longestPalindrome(String s) {
        if (Objects.isNull(s) || s.length() < 1) {
            return s;
        }
        char[] chars = s.toCharArray();
        boolean[][] dp = new boolean[chars.length][chars.length];
        for (int i = 0; i < dp.length; i++) {
            dp[i][i] = true;
        }
        int length = 1;
        int start = 0;
        for (int j = 1; j < chars.length; j++) {
            for (int i = 0; i < j; i++) {
                if (chars[i] != chars[j]) {
                    dp[i][j] = false;
                } else {
                    if (j - i < 3) {
                        dp[i][j] = true;
                    } else {
                        dp[i][j] = dp[i + 1][j - 1];
                    }
                }
                if (dp[i][j] && j - i + 1 > length) {
                    length = j - i + 1;
                    start = i;
                }
            }
        }
        return s.substring(start, start + length);

    }
}


//runtime:82 ms
//memory:41.9 MB
