
/**
 * 1 0 1 0 0
 * 1 0 <strong>1 1</strong> 1
 * 1 1 <strong>1 1 </strong>1
 * 1 0 0 1 0
 */
//DP f(i,j) = f
class Solution {
    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        int[][] dp = new int[matrix.length][matrix[0].length];
        int max = 0;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] == '1') {
                    if (i == 0 || j == 0) {
                        dp[i][j] = 1;
                    } else {
                        dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i - 1][j - 1]), dp[i][j - 1]) + 1;
                    }

                }
                max = Math.max(dp[i][j], max);
            }
        }
        return max * max;
    }
}

//runtime:7 ms
//memory:42.9 MB
