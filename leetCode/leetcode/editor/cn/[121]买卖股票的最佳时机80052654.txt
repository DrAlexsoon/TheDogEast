class Solution {
    //f(n) = Math.max(k(n) +f(n-1), f(n-1))
    //f(1) = k()
    public int maxProfit(int[] prices) {
        if(prices.length < 2){
            return 0;
        }
        int[][] dp = new int[prices.length][2];
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        for (int i = 1; i < prices.length; i++) {
            //卖出
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
            //买入
            dp[i][1] = Math.max(-prices[i], dp[i - 1][1]);
        }
        return Math.max(dp[prices.length - 1][0], dp[prices.length - 1][1]);
    }
}

//runtime:4 ms
//memory:39.5 MB
