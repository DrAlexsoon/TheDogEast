class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        LinkedList<Integer> result = new LinkedList<Integer>();
        char[] chars = p.toCharArray();
        Map<Character, Integer> map = new HashMap<>();
        for (char aChar : chars) {
            map.put(aChar, map.getOrDefault(aChar, 0) + 1);
        }
        int left = 0;
        int right = 0;
        int valid = p.length();
        Map<Character, Integer> windows = new HashMap<>();
        while (right < s.length()) {
            char c = s.charAt(right);
            right++;
            if (map.containsKey(c)) {
                windows.put(c, windows.getOrDefault(c, 0) + 1);
                if (windows.get(c) <= map.get(c)) {
                    valid--;
                }
            }
            if(right -left == p.length()){
                if(valid == 0){
                    result.add(left);
                }
                char c1 = s.charAt(left);
                if(windows.containsKey(c1)){
                    windows.put(c1, windows.get(c1) - 1);
                    if(windows.get(c1) < map.get(c1)){
                        valid++;
                    }
                }
                left++;
            }
        }
        return result;
    }
}

//runtime:48 ms
//memory:40.7 MB
