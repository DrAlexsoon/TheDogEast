class Solution {
    public int maximalSquare(char[][] matrix) {
        //f(i,j) =  min(f(i-1,j-1),f(i-1,j),f(i,j-1))
        //init f(0,j) = matrix[0][j];
        //f(i,0) = matrix[i][0];
        //i < matrix.length j <matrix[0].length
        if(matrix.length < 1) return 0;
        int[][] area = new int[matrix.length+1][matrix[0].length+1];
        int max = 0;
        for(int i = 1; i <= matrix.length;i++){
            for(int j =1 ;j <= matrix[0].length;j++){
                if(matrix[i-1][j-1] == '1' ){
                    area[i][j] = Math.min(area[i-1][j-1],Math.min(area[i-1][j],area[i][j-1])) + 1;
                    max = Math.max(area[i][j],max);
                }else{
                    area[i%2][j] = 0;
                }
            }
        }
        return (int )Math.pow(max,2);
    }
}
//runtime:7 ms
//memory:42.8 MB
